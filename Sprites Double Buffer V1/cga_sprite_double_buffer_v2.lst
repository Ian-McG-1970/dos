     1                                  ; nasm cga_line_v7.asm -o cgaline.com -f bin
     2                                  
     3                                  ; back_buffer - 16k - 16k screen containing background - to copy to screen_buffer - linear format
     4                                  ; screen_buffer - 16k - built up back_buffer and sprite - to copy to screen - linear format
     5                                  
     6                                  ; subroutine to copy vs/hs + ve/he - from back_buffer to screen_buffer - straight linear blit
     7                                  ; subroutine to draw vs/hs + ve/he - from sprite to screen_buffer - straight and/or linear copy
     8                                  ; subroutine to copy vs/hs + ve/he - from screen buffer to cga screen - copy from linear screen buffer to cga screen format (odd/even format)
     9                                  
    10                                  ; list of next line tables - even values = +8192 odd values = -8192 - put into 2 registers - swap registers after each next line
    11                                  
    12                                  VIDEO_SEGMENT	equ	0b800h 	; display memory segment for true CGA graphics modes
    13                                  SW				equ 80 		; screen width
    14                                  SE				equ	0		; screen even start
    15                                  SO				equ	8192	; screen odd start
    16                                  
    17                                  INPUT_STATUS_1	equ	03dah	; VGA status register
    18                                  VSYNC_MASK	equ	08h	; vertical sync bit in status register 1
    19                                  DE_MASK		equ	01h	; display enable bit in status register 1
    20                                  
    21                                  MAP_MASK	equ	2		; SC map mask register
    22                                  SC_INDEX		equ	3c4h	; SC index register
    23                                   
    24                                  KEY_1	EQU	0231h
    25                                  KEY_2	EQU	0332h
    26                                  KEY_3	EQU	0433h
    27                                  KEY_4 	EQU	0534h
    28                                  KEY_5 	EQU	0635h
    29                                  KEY_6 	EQU	0736h
    30                                  KEY_ESC	EQU 27
    31                                  
    32                                  ODD_INC 	EQU 8192; -80; +80
    33                                  EVEN_INC 	EQU -8192+80; +80; +80 ;-80
    34                                  
    35                                  CPU 8086
    36                                  bits 16
    37                                  org 100h
    38                                  
    39                                  section .text
    40                                  
    41                                  start:
    42 00000000 FA                      	CLI			; disable interrupts
    43 00000001 E8A100                  	call	BuildScreenTable
    44 00000004 B80400                  	mov	ax,04h 	; CGA 320 x 200 4 colors
    45 00000007 CD10                    	int		10h
    46                                  
    47                                  ;	mov	ax,0Bh 	; Pallette
    48                                  ;	mov	bh,1
    49                                  ;	mov	bl,0
    50                                  ;	mov	bx,00000h ; pallette 0 high
    51                                  ;	int	10h 
    52                                  
    53 00000009 BB0010                  	mov		bx,1000h
    54 0000000C E88B00                  	call	AllocMem
    55 0000000F A3[3E03]                	mov		[BackBufferSeg],ax
    56                                  
    57 00000012 BB0010                  	mov		bx,1000h
    58 00000015 E88200                  	call	AllocMem
    59 00000018 A3[3C03]                	mov		[ScrnBufferSeg],ax
    60                                  	
    61 0000001B 31C0                    	xor ax,ax
    62 0000001D A2[4003]                	mov	[Exit],al
    63                                  	
    64 00000020 FC                      	cld
    65                                  	
    66                                  ;	call	ResetBackBuffer
    67                                  
    68                                  MainLoop:
    69 00000021 E87001                  		call	WaitVSync ; Wait for vertical sync so the new start address has a chance to take effect.
    70                                  ;		call	CopyClearBackBuffer ; copy back to front
    71                                  	
    72                                  ;		mov		bx,[BackBufferSeg]
    73                                  ;		mov		es,bx
    74                                  
    75 00000024 B800B8                  		mov		ax,VIDEO_SEGMENT
    76 00000027 8EC0                    		mov		es,ax
    77                                  		
    78 00000029 B300                    		mov		bl,0
    79 0000002B A1[0000]                		mov		ax,[XPos]
    80 0000002E E82102                  		call	Hex16
    81 00000031 B301                    		mov		bl,1
    82 00000033 A1[0200]                		mov		ax,[YPos]
    83 00000036 E81902                  		call	Hex16
    84                                  
    85                                  
    86 00000039 8B36[0000]              		mov		si,[XPos]	; ver pixel pos
    87 0000003D 8B3E[0200]              		mov		di,[YPos]	; hor pixel pos
    88 00000041 BB0500                  		mov		bx,5		; words copied
    89 00000044 B209                    		mov		dl,9		; lines copied /2
    90 00000046 8B0E[3C03]              		mov		cx,[ScrnBufferSeg]	; from back_buffer (es) ; are these source and dest segments the wrong around? 
    91 0000004A 8EC1                    		mov		es,cx
    92 0000004C 8B0E[3E03]              		mov		cx,[BackBufferSeg]	; to screen_buffer (ds) ; are these source and dest segments the wrong around? 
    93 00000050 E88000                  		call	Blitter
    94                                  
    95 00000053 8B2E[0000]              		mov		bp,[XPos]	; ver pixel pos
    96 00000057 8B3E[0200]              		mov		di,[YPos]	; hor pixel pos
    97 0000005B B90300                  		mov		cx,3		; bytes 
    98 0000005E B704                    		mov		bh,4		; lines /2
    99 00000060 8D36[5600]              		lea		si,[SpriteData]
   100 00000064 A1[3C03]                		mov		ax,[ScrnBufferSeg]	; to screen_buffer (es)
   101 00000067 8EC0                    		mov		es,ax
   102 00000069 8CD8                    		mov		ax,ds				; from sprite_buffer (ds)
   103 0000006B E89400                  		call	Sprite
   104                                  
   105 0000006E 8B36[0000]              		mov		si,[XPos]	; ver pixel pos
   106 00000072 8B3E[0200]              		mov		di,[YPos]	; hor pixel pos
   107 00000076 BB0500                  		mov		bx,5		; words copied
   108 00000079 B209                    		mov		dl,9		; lines copied /2
   109 0000007B B900B8                  		mov		cx,VIDEO_SEGMENT	; from back_buffer (es)
   110 0000007E 8EC1                    		mov		es,cx
   111 00000080 8B0E[3C03]              		mov		cx,[ScrnBufferSeg]	; to screen_buffer (ds)
   112 00000084 E84C00                  		call	Blitter
   113                                  		
   114 00000087 E8AF00                  		call	GetKey
   115                                  		
   116 0000008A A0[4003]                	mov		al,[Exit]
   117 0000008D 08C0                    	or		al,al
   118 0000008F 7490                    	je		MainLoop
   119                                  
   120 00000091 B80300                  Done:	mov		ax,3	; reset to text mode
   121 00000094 CD10                    		int		10h
   122 00000096 B44C                    		mov		ah,4ch	; exit to DOS
   123 00000098 CD21                    		int		21h
   124                                  
   125 0000009A B44A                    AllocMem:	mov		ah,4ah	; allocate bx * 16
   126 0000009C 53                      			push	bx
   127 0000009D CD21                    			int		21h
   128 0000009F B448                    			mov		ah,48h
   129 000000A1 5B                      			pop		bx
   130 000000A2 CD21                    			int		21h
   131 000000A4 C3                      			ret
   132                                  
   133 000000A5 8D3E[0000]              BuildScreenTable:	lea		di,[BackBufferTable]
   134 000000A9 31ED                    					xor		bp,bp	; even lines
   135                                  
   136 000000AB 8D36[9401]              					lea		si,[BackBufferTableInc]
   137 000000AF BB0020                  					mov 	bx,ODD_INC
   138 000000B2 BA50E0                  					mov		dx,EVEN_INC
   139                                  
   140 000000B5 B96400                  					mov		cx,100
   141 000000B8 892D                    .loop:					mov		[di],bp
   142 000000BA 01DD                    						add		bp,bx	; ODD_INC
   143 000000BC 896D02                  						mov		[di+2],bp
   144 000000BF 81EDB01F                						sub		bp,8192-80
   145                                  
   146 000000C3 3E891C                  						mov		[ds:si],bx
   147 000000C6 3E895402                						mov 	[ds:si+2],dx
   148 000000CA 83C604                  						add		si,4
   149                                  
   150 000000CD 83C704                  						add		di,4
   151 000000D0 E2E6                    						loop	.loop
   152 000000D2 C3                      					ret
   153                                  
   154                                  ; si=v pos
   155                                  ; di=h pos
   156                                  ; bx=h size in words
   157                                  ; dl=v size /2
   158                                  ; es=dest segement
   159                                  ; cx=source segment - to populate ds
   160                                  
   161                                  ; copy permanent background to temp background - ds = perm background + es = temp background
   162                                  ; copy temp background to screen - ds = temp background + es = screen
   163                                  
   164                                  Blitter: ; blit from ds to es - either (back buffer (ds) to screen buffer (es) ) or (screen buffer (ds) to cga screen (es) )
   165                                  ;			mov		cl,2
   166                                  ;			shr		di,cl
   167                                  ;			shr		di,1
   168                                  ;			shr		di,1
   169                                  ;			dec		di
   170                                  
   171 000000D3 01F6                    			add		si,si
   172 000000D5 03BC[0000]              			add		di,[BackBufferTable+si]			; di=di (screen hor char pos) + screen ver pos
   173 000000D9 8B84[9401]              			mov		ax,[BackBufferTableInc+si]		; either -8192 or 8192
   174 000000DD 8BAC[9601]              			mov		bp,[BackBufferTableInc+2+si]	; either 8192 or -8192
   175                                  
   176 000000E1 1E                      	push ds
   177 000000E2 8ED9                    	mov	ds,cx
   178                                  	
   179 000000E4 89D9                    			mov		cx,bx
   180 000000E6 01C9                    			add		cx,cx
   181                                  
   182 000000E8 29C8                    			sub		ax,cx
   183 000000EA 29CD                    			sub		bp,cx
   184                                  
   185 000000EC 89FE                    .loop			mov		si,di
   186 000000EE 89D9                    				mov		cx,bx
   187 000000F0 F3A5                    				rep		movsw
   188 000000F2 01C7                    				add		di,ax
   189                                  
   190 000000F4 89FE                    				mov		si,di
   191 000000F6 89D9                    				mov		cx,bx
   192 000000F8 F3A5                    				rep		movsw
   193 000000FA 01EF                    				add		di,bp
   194                                  
   195 000000FC FECA                    				dec		dl							; ver count
   196 000000FE 75EC                    				jne		.loop
   197                                  
   198 00000100 1F                      	pop	ds
   199 00000101 C3                      			ret
   200                                  
   201                                  ; draw sprite on temp background - ds:si = sprite + es:di = temp background
   202                                  
   203                                  ; bp=v pos
   204                                  ; di=h pos
   205                                  ; cx=h size char pos
   206                                  ; bh=v size /2
   207                                  ; ds:si=sprite
   208                                  ; ax=source segment - to populate ds
   209                                  
   210                                  Sprite: ; linear to linear
   211                                  ;			mov		cl,2
   212                                  ;			shr		di,cl
   213                                  ;			shr		di,1
   214                                  ;			shr		di,1
   215                                  
   216 00000102 01ED                    			add		bp,bp
   217 00000104 03BE[0000]              			add		di,[BackBufferTable+bp]			; di=di (screen hor char pos) + screen ver pos
   218 00000108 8B96[9401]              			mov		dx,[BackBufferTableInc+bp]		; either -8192 or 8192
   219 0000010C 8BAE[9601]              			mov		bp,[BackBufferTableInc+2+bp]	; either 8192 or -8192
   220                                  
   221 00000110 1E                      	push ds
   222 00000111 8ED8                    	mov	ds,ax
   223                                  
   224 00000113 29CA                    			sub		dx,cx
   225 00000115 29CD                    			sub		bp,cx
   226 00000117 88CB                    			mov		bl,cl
   227                                  
   228 00000119 88D9                    .loop1:			mov		cl,bl
   229                                  
   230 0000011B AD                      .loop2:				lodsw				; get ax from ds:si and inc si - al/ah = mask/sprite
   231 0000011C 262205                  					and		al,[es:di]	; get background
   232 0000011F 08E0                    					or		al,ah
   233 00000121 AA                      					stosb				; store al in es:di and inc di
   234 00000122 E2F7                    					loop	.loop2
   235                                  
   236 00000124 01D7                    				add		di,dx
   237 00000126 88D9                    				mov		cl,bl
   238                                  
   239 00000128 AD                      .loop3				lodsw				; get ax from ds:si and inc si - al/ah = mask/sprite
   240 00000129 262205                  					and		al,[es:di]	; get background
   241 0000012C 08E0                    					or		al,ah
   242 0000012E AA                      					stosb				; store al in es:di and inc di
   243 0000012F E2F7                    					loop	.loop3
   244                                  					
   245 00000131 01EF                    				add		di,bp
   246                                  
   247 00000133 FECF                    				dec		bh							; ver count
   248 00000135 75E2                    				jne		.loop1
   249                                  
   250 00000137 1F                      	pop	ds
   251 00000138 C3                      			ret
   252                                  
   253                                  GetKey:
   254 00000139 B411                    	mov	ah,11h
   255 0000013B CD16                    	int	16h         	; has a key been pressed
   256 0000013D 7426                    	jz	.key_none ; no
   257 0000013F B410                    	mov	ah,10h      ; yes 
   258 00000141 CD16                    	int	16h         	; get it in AX (al= ascii, ah=scan code)
   259 00000143 3C1B                    	cmp	al,KEY_ESC
   260 00000145 741F                    	je	.key_esc
   261 00000147 3D3102                  	cmp 	ax,KEY_1
   262 0000014A 7420                    	je 	.key_1
   263 0000014C 3D3203                  	cmp 	ax,KEY_2
   264 0000014F 7423                    	je 	.key_2
   265 00000151 3D3304                  	cmp 	ax,KEY_3
   266 00000154 7426                    	je 	.key_3
   267 00000156 3D3405                  	cmp 	ax,KEY_4
   268 00000159 7429                    	je 	.key_4
   269 0000015B 3D3506                  	cmp 	ax,KEY_5
   270 0000015E 742C                    	je 	.key_5
   271 00000160 3D3607                  	cmp 	ax,KEY_6
   272 00000163 742B                    	je 	.key_6
   273                                  .key_none:
   274 00000165 C3                      	ret
   275                                  .key_esc:
   276 00000166 B001                    	mov	al,1
   277 00000168 A2[4003]                	mov	[Exit],al
   278 0000016B C3                      	ret
   279                                  .key_1:
   280 0000016C A1[0000]                	mov ax,[XPos]
   281 0000016F 48                      	dec ax
   282 00000170 A3[0000]                	mov [XPos],ax
   283 00000173 C3                      	ret
   284                                  .key_2:
   285 00000174 A1[0000]                	mov ax,[XPos]
   286 00000177 40                      	inc ax
   287 00000178 A3[0000]                	mov [XPos],ax
   288 0000017B C3                      	ret
   289                                  .key_3:
   290 0000017C A1[0200]                	mov ax,[YPos]
   291 0000017F 48                      	dec ax
   292 00000180 A3[0200]                	mov [YPos],ax
   293 00000183 C3                      	ret
   294                                  .key_4:
   295 00000184 A1[0200]                	mov ax,[YPos]
   296 00000187 40                      	inc ax
   297 00000188 A3[0200]                	mov [YPos],ax
   298 0000018B C3                      	ret
   299                                  .key_5:
   300                                  ;	mov ax,[ZOffset]
   301 0000018C 83E825                  	sub ax,37
   302                                  ;	mov [ZOffset],ax
   303 0000018F C3                      	ret
   304                                  .key_6:
   305                                  ;	mov ax,[ZOffset]
   306 00000190 83C025                  	add ax,37
   307                                  ;	mov [ZOffset],ax
   308 00000193 C3                      	ret
   309                                  
   310 00000194 BADA03                  WaitVSync: 			mov		dx,INPUT_STATUS_1	; Wait for the leading edge of vertical sync pulse.
   311 00000197 EC                      WaitNotVSyncLoop:		in		al,dx
   312 00000198 2408                    						and		al,VSYNC_MASK
   313 0000019A 75FB                    						jnz		WaitNotVSyncLoop
   314 0000019C EC                      WaitVSyncLoop:			in		al,dx
   315 0000019D 2408                    						and		al,VSYNC_MASK
   316 0000019F 74FB                    						jz		WaitVSyncLoop
   317 000001A1 C3                      					ret
   318                                  		
   319                                  ResetBackBuffer:
   320 000001A2 A1[3E03]                	mov		ax,[BackBufferSeg]
   321 000001A5 8EC0                    	mov		es,ax
   322                                  
   323 000001A7 B8F05A                  	mov		ax,0101101011110000b ; 00101101001011010b ;
   324                                  	
   325 000001AA 31FF                    	xor		di,di		; DS:SI points to even back buffer	
   326 000001AC B9A00F                  	mov		cx,4000
   327 000001AF F3AB                    	rep	stosw			; clear odd back buffer
   328                                  
   329 000001B1 BF0020                  	mov		di,8192		; DS:SI points to odd back buffer	
   330 000001B4 B9A00F                  	mov		cx,4000
   331 000001B7 F3AB                    	rep	stosw			; clear odd back buffer
   332                                  
   333 000001B9 C3                      	ret
   334                                  
   335 000001BA 89FE                    HexChar:	mov		si,di
   336 000001BC 88C3                    			mov		bl,al
   337 000001BE D0EB                    			shr		bl,1
   338 000001C0 D0EB                    			shr		bl,1
   339 000001C2 D0EB                    			shr		bl,1
   340 000001C4 D0EB                    			shr		bl,1
   341 000001C6 83E30F                  			and		bx,15
   342 000001C9 8AA7[0600]              			mov		ah,[Hex0+bx]
   343 000001CD 268825                  			mov		[es:di],ah
   344 000001D0 81C70020                			add		di,8192
   345 000001D4 8AA7[1600]              			mov		ah,[Hex1+bx]
   346 000001D8 268825                  			mov		[es:di],ah
   347 000001DB 81EFB01F                			sub		di,8192-80
   348 000001DF 8AA7[2600]              			mov		ah,[Hex2+bx]
   349 000001E3 268825                  			mov		[es:di],ah
   350 000001E6 81C70020                			add		di,8192
   351 000001EA 8AA7[3600]              			mov		ah,[Hex3+bx]
   352 000001EE 268825                  			mov		[es:di],ah
   353 000001F1 81EFB01F                			sub		di,8192-80
   354 000001F5 8AA7[4600]              			mov		ah,[Hex4+bx]
   355 000001F9 268825                  			mov		[es:di],ah
   356                                  
   357 000001FC 89F7                    			mov		di,si
   358 000001FE 47                      			inc		di
   359                                  
   360 000001FF 88C3                    			mov		bl,al
   361 00000201 80E30F                  			and		bl,15
   362 00000204 8A87[0600]              			mov		al,[Hex0+bx]
   363 00000208 268805                  			mov		[es:di],al
   364 0000020B 81C70020                			add		di,8192
   365 0000020F 8A87[1600]              			mov		al,[Hex1+bx]
   366 00000213 268805                  			mov		[es:di],al
   367 00000216 81EFB01F                			sub		di,8192-80
   368 0000021A 8A87[2600]              			mov		al,[Hex2+bx]
   369 0000021E 268805                  			mov		[es:di],al
   370 00000221 81C70020                			add		di,8192
   371 00000225 8A87[3600]              			mov		al,[Hex3+bx]
   372 00000229 268805                  			mov		[es:di],al
   373 0000022C 81EFB01F                			sub		di,8192-80
   374 00000230 8A87[4600]              			mov		al,[Hex4+bx]
   375 00000234 268805                  			mov		[es:di],al
   376 00000237 C3                      			ret
   377                                  
   378 00000238 50                      Hex24:		push	ax
   379 00000239 53                      			push	bx
   380                                  
   381 0000023A 88F8                    			mov		al,bh
   382 0000023C E82100                  			call	Hex8
   383                                  						
   384 0000023F 5B                      			pop		bx
   385 00000240 58                      			pop		ax
   386                                  
   387 00000241 50                      			push	ax
   388 00000242 53                      			push	bx
   389                                  
   390 00000243 BF0200                  			mov		di,2
   391 00000246 E81900                  			call	HexByte
   392                                  
   393 00000249 5B                      			pop		bx
   394 0000024A 58                      			pop		ax
   395                                  
   396 0000024B 88E0                    			mov		al,ah
   397 0000024D BF0400                  			mov		di,4
   398 00000250 EB10                    			jmp		HexByte	; does ret
   399                                  
   400 00000252 50                      Hex16:		push	ax
   401 00000253 53                      			push	bx
   402                                  
   403 00000254 88E0                    			mov		al,ah
   404 00000256 E80700                  			call	Hex8
   405                                  						
   406 00000259 5B                      			pop		bx
   407 0000025A 58                      			pop		ax
   408                                  
   409 0000025B BF0200                  			mov		di,2
   410 0000025E EB02                    			jmp		HexByte ; does ret
   411                                  
   412 00000260 31FF                    Hex8:		xor		di,di
   413 00000262 30FF                    HexByte:	xor		bh,bh
   414 00000264 88DC                    			mov		ah,bl
   415 00000266 00E4                    			add		ah,ah	; *2
   416 00000268 00E3                    			add		bl,ah	; *3
   417 0000026A 01DB                    			add		bx,bx	; *6
   418 0000026C 01DB                    			add		bx,bx	; *12
   419 0000026E 03BF[0000]              			add		di,[BackBufferTable+bx]	; lookup start ver
   420 00000272 E945FF                  			jmp		HexChar	 ; does ret
   421                                  ;			ret
   422                                  	
   423                                  section .data align=8 ; 16 ; 8 ; 16
   424                                  
   425 00000000 6400                    XPos:	dw		100
   426 00000002 6400                    YPos:	dw		100
   427 00000004 6400                    ZPos:	dw		100
   428                                  
   429 00000006 FC30FCFCCCFCFCFCFC-     Hex0	db 11111100b,00110000b,11111100b,11111100b,11001100b,11111100b,11111100b,11111100b,11111100b,11111100b,11111100b,11111100b,11111100b,11110000b,11111100b,11111100b
   429 0000000F FCFCFCFCF0FCFC     
   430 00000016 CCF00C0CCCC0C00CCC-     Hex1	db 11001100b,11110000b,00001100b,00001100b,11001100b,11000000b,11000000b,00001100b,11001100b,11001100b,11001100b,11001100b,11000000b,11001100b,11000000b,11000000b
   430 0000001F CCCCCCC0CCC0C0     
   431 00000026 CC30FCFCFCFCFC0CFC-     Hex2	db 11001100b,00110000b,11111100b,11111100b,11111100b,11111100b,11111100b,00001100b,11111100b,11111100b,11111100b,11110000b,11000000b,11001100b,11111100b,11111100b
   431 0000002F FCFCF0C0CCFCFC     
   432 00000036 CC30C00C0C0CCC0CCC-     Hex3	db 11001100b,00110000b,11000000b,00001100b,00001100b,00001100b,11001100b,00001100b,11001100b,00001100b,11001100b,11001100b,11000000b,11001100b,11000000b,11000000b
   432 0000003F 0CCCCCC0CCC0C0     
   433 00000046 FCFCFCFC0CFCFC0CFC-     Hex4	db 11111100b,11111100b,11111100b,11111100b,00001100b,11111100b,11111100b,00001100b,11111100b,11111100b,11001100b,11111100b,11111100b,11110000b,11111100b,11000000b
   433 0000004F FCCCFCFCF0FCC0     
   434                                  
   435                                  SpriteData:
   436 00000056 FF00FF00FF00            	dw	0000000011111111b,0000000011111111b,0000000011111111b
   437 0000005C FF3FFFFCFF00            	dw	0011111111111111b,1111110011111111b,0000000011111111b
   438 00000062 FF2AFFA8FF00            	dw	0010101011111111b,1010100011111111b,0000000011111111b
   439 00000068 FF30FF0CFF00            	dw	0011000011111111b,0000110011111111b,0000000011111111b
   440 0000006E FF30FF0CFF00            	dw	0011000011111111b,0000110011111111b,0000000011111111b
   441 00000074 FF15FF54FF00            	dw	0001010111111111b,0101010011111111b,0000000011111111b
   442 0000007A FF3FFFFCFF00            	dw	0011111111111111b,1111110011111111b,0000000011111111b
   443 00000080 FF00FF00FF00            	dw	0000000011111111b,0000000011111111b,0000000011111111b
   444                                  
   445                                  section .bss 	; put uninitialized data here
   446 00000000 <res 194h>              BackBufferTable: 	resw 202 	; 200 screen lines as words
   447 00000194 <res 194h>              BackBufferTableInc:	resw 202	; 200 screen line next line increments
   448                                  
   449 00000328 ????                    Test0: 	resw	1
   450 0000032A ????                    Test1: 	resw	1
   451 0000032C ????                    Test2: 	resw	1
   452 0000032E ????                    Test3: 	resw	1
   453 00000330 ????                    Test4: 	resw	1
   454 00000332 ????                    Test5: 	resw	1
   455 00000334 ????                    Test6: 	resw	1
   456 00000336 ????                    Test7: 	resw	1
   457 00000338 ????                    Test8: 	resw	1
   458 0000033A ????                    Test9: 	resw	1
   459                                  
   460 0000033C ????                    ScrnBufferSeg	resw	1	; pointer to the segment containing the screen buffer
   461 0000033E ????                    BackBufferSeg	resw	1	; pointer to the segment containing the back buffer
   462                                  
   463 00000340 ??                      Exit:	resb	1
   464                                  
   465                                  ; work out the size of the block of data that needs to be moved
   466                                  ; add 1 to each side of the block - -1 from ver_start +1 to ver_end -1 from hor_start +1 to ver_end
   467                                  ; copy the block from back buffer to screen buffer - linear copy a word at a time - es=bb ds=sb ?
   468                                  ; draw the sprites on the screen buffer if they are within this square - linear copy and/or copy a byte at a time - es=sb ds=spr?
   469                                  ; copy the block from screen buffer to cga screen - non-linear copy a word at a time - es=cga ds=sb?
