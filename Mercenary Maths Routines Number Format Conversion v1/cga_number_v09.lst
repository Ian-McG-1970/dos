     1                                  ; n cga_number_v08
     2                                  	
     3                                  ; list of next line tables - even values = +8192 odd values = -8192 - put into 2 registers - swap registers after each next line
     4                                  
     5                                  VIDEO_SEGMENT	equ	0b800h 	; display memory segment for true CGA graphics modes
     6                                  SW				equ 80 		; screen width
     7                                  SE				equ	0		; screen even start
     8                                  SO				equ	8192	; screen odd start
     9                                  
    10                                  INPUT_STATUS_1	equ	03dah	; VGA status register
    11                                  VSYNC_MASK	equ	08h	; vertical sync bit in status register 1
    12                                  DE_MASK		equ	01h	; display enable bit in status register 1
    13                                  
    14                                  MAP_MASK	equ	2		; SC map mask register
    15                                  SC_INDEX		equ	3c4h	; SC index register
    16                                  
    17                                  KEY_1	EQU	0231h
    18                                  KEY_2	EQU	0332h
    19                                  KEY_3	EQU	0433h
    20                                  KEY_4 	EQU	0534h
    21                                  KEY_5 	EQU	0635h
    22                                  KEY_6 	EQU	0736h
    23                                  KEY_7 	EQU	0837h
    24                                  KEY_8 	EQU	0938h
    25                                  KEY_ESC	EQU 27
    26                                  
    27                                  CPU 8086
    28                                  bits 16
    29                                  org 100h
    30                                  
    31                                  section .text
    32                                  
    33                                  start:
    34 00000000 E84602                  	call		BuildScreenTable
    35                                  
    36 00000003 B80400                  	mov	ax,04h 	; CGA 320 x 200 4 colors
    37 00000006 CD10                    	int		10h
    38                                  
    39                                  ;	mov	ax,0Bh 	; Pallette
    40                                  ;	mov	bh,1
    41                                  ;	mov	bl,0
    42                                  ;	mov	bx,00000h ; pallette 0 high
    43                                  ;	int	10h 
    44                                  	
    45 00000008 B44A                    	mov	ah, 4ah
    46 0000000A BB0010                  	mov	bx, 1000h
    47 0000000D CD21                    	int	21h
    48 0000000F B448                    	mov	ah, 48h
    49 00000011 BB0010                  	mov	bx, 1000h
    50 00000014 CD21                    	int	21h
    51 00000016 A3[0080]                	mov	[BackBufferSeg], ax
    52                                  	
    53                                  MainLoop:
    54 00000019 E88502                  		call	WaitVSync ; Wait for vertical sync so the new start address has a chance to take effect.
    55 0000001C E84802                  		call	CopyClearBackBuffer ; copy back to front
    56                                  	
    57 0000001F 8B1E[0080]              		mov		bx,[BackBufferSeg]
    58 00000023 8EC3                    		mov		es,bx
    59                                  
    60 00000025 8A3E[5102]              		mov		bh,[XPos+1]
    61 00000029 A1[5202]                		mov		ax,[XPos+2]
    62 0000002C B301                    		mov		bl,1
    63 0000002E E8C303                  		call	Hex24
    64                                  
    65 00000031 A0[5802]                		mov		al,[XInc]
    66 00000034 B302                    		mov		bl,2
    67 00000036 E8E303                  		call	Hex8
    68                                  
    69 00000039 8A16[5102]              		mov		dl,[XPos+1]
    70 0000003D A1[5202]                		mov		ax,[XPos+2]
    71 00000040 E86C02                  		call	BIT24TOFP
    72 00000043 B303                    		mov		bl,3
    73 00000045 A3[0480]                		mov		[XFP],ax
    74 00000048 E8C303                  		call	Hex16
    75                                  
    76 0000004B A1[0480]                		mov		ax,[XFP]
    77 0000004E E89902                  		call	FPTO16BIT
    78 00000051 B304                    		mov		bl,4
    79 00000053 E8B803                  		call	Hex16
    80                                  
    81 00000056 A1[0480]                		mov		ax,[XFP]
    82 00000059 E8DF02                  		call	FPTO8BIT
    83 0000005C B306                    		mov		bl,6
    84 0000005E E8BB03                  		call	Hex8
    85                                  
    86 00000061 8A3E[5502]              		mov		bh,[ZPos+1]
    87 00000065 A1[5602]                		mov		ax,[ZPos+2]
    88 00000068 B307                    		mov		bl,7
    89 0000006A E88703                  		call	Hex24
    90                                  
    91 0000006D A0[5902]                		mov		al,[ZInc]
    92 00000070 B308                    		mov		bl,8
    93 00000072 E8A703                  		call	Hex8
    94                                  
    95 00000075 8A16[5502]              		mov		dl,[ZPos+1]
    96 00000079 A1[5602]                		mov		ax,[ZPos+2]
    97 0000007C E83002                  		call	BIT24TOFP
    98 0000007F A3[0680]                		mov		[ZFP],ax
    99 00000082 B309                    		mov		bl,9
   100 00000084 E88703                  		call	Hex16
   101                                  
   102 00000087 A1[0680]                		mov		ax,[ZFP]
   103 0000008A E85D02                  		call	FPTO16BIT
   104 0000008D B30A                    		mov		bl,10
   105 0000008F E87C03                  		call	Hex16
   106                                  
   107 00000092 A1[0680]                		mov		ax,[ZFP]
   108 00000095 E8A302                  		call	FPTO8BIT
   109 00000098 B30B                    		mov		bl,11
   110 0000009A E87F03                  		call	Hex8
   111                                  
   112 0000009D 8B16[0680]              		mov		dx,[ZFP]
   113 000000A1 8B1E[0480]              		mov		bx,[XFP]		
   114 000000A5 E8C903                  		call	FP_ADD
   115 000000A8 89D0                    		mov		ax,dx
   116 000000AA B30D                    		mov		bl,13
   117 000000AC E85F03                  		call	Hex16
   118                                  
   119 000000AF 8B1E[0680]              		mov		bx,[ZFP]
   120 000000B3 8B16[0480]              		mov		dx,[XFP]		
   121 000000B7 E89804                  		call	FP_MUL
   122 000000BA A3[0280]                		mov		[tst],ax
   123 000000BD B30E                    		mov		bl,14
   124 000000BF E84C03                  		call	Hex16
   125                                  
   126 000000C2 8B1E[0280]              		mov		bx,[tst]
   127 000000C6 8B16[0480]              		mov		dx,[XFP]		
   128 000000CA E86404                  		call	FP_DIV
   129 000000CD B30F                    		mov		bl,15
   130 000000CF E83C03                  		call	Hex16
   131                                  
   132 000000D2 A0[5A02]                		mov		al,[Test1]
   133 000000D5 B317                    		mov		bl,23
   134 000000D7 E84203                  		call	Hex8
   135 000000DA A0[5B02]                		mov		al,[Test2]
   136 000000DD B318                    		mov		bl,24
   137 000000DF E83A03                  		call	Hex8
   138 000000E2 A0[5C02]                		mov		al,[Test3]
   139 000000E5 B319                    		mov		bl,25
   140 000000E7 E83203                  		call	Hex8
   141 000000EA A0[5D02]                		mov		al,[Test4]
   142 000000ED B31A                    		mov		bl,26
   143 000000EF E82A03                  		call	Hex8
   144 000000F2 A0[5E02]                		mov		al,[Test5]
   145 000000F5 B31B                    		mov		bl,27
   146 000000F7 E82203                  		call	Hex8
   147 000000FA A0[5F02]                		mov		al,[Test6]
   148 000000FD B31C                    		mov		bl,28
   149 000000FF E81A03                  		call	Hex8
   150 00000102 A0[6002]                		mov		al,[Test7]
   151 00000105 B31D                    		mov		bl,29
   152 00000107 E81203                  		call	Hex8
   153 0000010A A0[6102]                		mov		al,[Test8]
   154 0000010D B31E                    		mov		bl,30
   155 0000010F E80A03                  		call	Hex8
   156 00000112 A0[6202]                		mov		al,[Test9]
   157 00000115 B31F                    		mov		bl,31
   158 00000117 E80203                  		call	Hex8
   159                                  
   160 0000011A 8A26[5802]              	mov		ah,[XInc]
   161 0000011E A0[5302]                	mov 	al,[XPos+3]
   162 00000121 28E0                    	sub 	al,ah
   163 00000123 A2[5302]                	mov 	[XPos+3],al
   164 00000126 A0[5202]                	mov 	al,[XPos+2]
   165 00000129 1C00                    	sbb 	al,0
   166 0000012B A2[5202]                	mov 	[XPos+2],al
   167 0000012E A0[5102]                	mov 	al,[XPos+1]
   168 00000131 1C00                    	sbb 	al,0
   169 00000133 A2[5102]                	mov 	[XPos+1],al
   170                                  
   171 00000136 8A26[5902]              	mov		ah,[ZInc]
   172 0000013A A0[5702]                	mov 	al,[ZPos+3]
   173 0000013D 00E0                    	add 	al,ah
   174 0000013F A2[5702]                	mov 	[ZPos+3],al
   175 00000142 A0[5602]                	mov 	al,[ZPos+2]
   176 00000145 1400                    	adc 	al,0
   177 00000147 A2[5602]                	mov 	[ZPos+2],al
   178 0000014A A0[5502]                	mov 	al,[ZPos+1]
   179 0000014D 1400                    	adc 	al,0
   180 0000014F A2[5502]                	mov 	[ZPos+1],al
   181                                  
   182 00000152 E81300                  		call	GetKey
   183                                  	
   184 00000155 A0[6302]                	mov		al,[Exit]
   185 00000158 84C0                    	test	al,al
   186 0000015A 7503E9BAFE              	jz		MainLoop
   187                                  
   188                                  Done: ; Finished, clear key, reset screen mode and exit.
   189 0000015F B80300                  	mov	ax,3		; reset to text mode
   190 00000162 CD10                    	int		10h
   191 00000164 B44C                    	mov	ah,4ch	; exit to DOS
   192 00000166 CD21                    	int		21h
   193                                  
   194                                  GetKey:
   195 00000168 B411                    	mov		ah,11h
   196 0000016A CD16                    	int		16h         	; has a key been pressed
   197 0000016C 743C                    	jz		.key_none ; no
   198 0000016E B410                    	mov		ah,10h      ; yes 
   199 00000170 CD16                    	int		16h         	; get it in AX (al= ascii, ah=scan code)
   200 00000172 3C1B                    	cmp		al,KEY_ESC
   201 00000174 7435                    	je		.key_esc
   202 00000176 3D3102                  	cmp 	ax,KEY_1
   203 00000179 7436                    	je 		.key_1
   204 0000017B 3D3203                  	cmp 	ax,KEY_2
   205 0000017E 744E                    	je 		.key_2
   206 00000180 3D3304                  	cmp 	ax,KEY_3
   207 00000183 7466                    	je 		.key_3
   208 00000185 3D3405                  	cmp 	ax,KEY_4
   209 00000188 747E                    	je 		.key_4
   210 0000018A 3D3506                  	cmp 	ax,KEY_5
   211 0000018D 7503E99300              	je 		.key_5
   212 00000192 3D3607                  	cmp 	ax,KEY_6
   213 00000195 7503E99400              	je 		.key_6
   214 0000019A 3D3708                  	cmp 	ax,KEY_7
   215 0000019D 7503E99500              	je 		.key_7
   216 000001A2 3D3809                  	cmp 	ax,KEY_8
   217 000001A5 7503E99600              	je 		.key_8
   218                                  .key_none:
   219 000001AA C3                      	ret
   220                                  .key_esc:
   221 000001AB B001                    	mov		al,1
   222 000001AD A2[6302]                	mov		[Exit],al
   223 000001B0 C3                      	ret
   224                                  .key_1:
   225 000001B1 8A26[5802]              	mov		ah,[XInc]
   226 000001B5 A0[5302]                	mov 	al,[XPos+3]
   227 000001B8 28E0                    	sub 	al,ah
   228 000001BA A2[5302]                	mov 	[XPos+3],al
   229 000001BD A0[5202]                	mov 	al,[XPos+2]
   230 000001C0 1C00                    	sbb 	al,0
   231 000001C2 A2[5202]                	mov 	[XPos+2],al
   232 000001C5 A0[5102]                	mov 	al,[XPos+1]
   233 000001C8 1C00                    	sbb 	al,0
   234 000001CA A2[5102]                	mov 	[XPos+1],al
   235 000001CD C3                      	ret
   236                                  .key_2:
   237 000001CE 8A26[5802]              	mov		ah,[XInc]
   238 000001D2 A0[5302]                	mov 	al,[XPos+3]
   239 000001D5 00E0                    	add 	al,ah
   240 000001D7 A2[5302]                	mov 	[XPos+3],al
   241 000001DA A0[5202]                	mov 	al,[XPos+2]
   242 000001DD 1400                    	adc 	al,0
   243 000001DF A2[5202]                	mov 	[XPos+2],al
   244 000001E2 A0[5102]                	mov 	al,[XPos+1]
   245 000001E5 1400                    	adc 	al,0
   246 000001E7 A2[5102]                	mov 	[XPos+1],al
   247 000001EA C3                      	ret
   248                                  .key_3:
   249 000001EB 8A26[5902]              	mov		ah,[ZInc]
   250 000001EF A0[5702]                	mov 	al,[ZPos+3]
   251 000001F2 28E0                    	sub 	al,ah
   252 000001F4 A2[5702]                	mov 	[ZPos+3],al
   253 000001F7 A0[5602]                	mov 	al,[ZPos+2]
   254 000001FA 1C00                    	sbb 	al,0
   255 000001FC A2[5602]                	mov 	[ZPos+2],al
   256 000001FF A0[5502]                	mov 	al,[ZPos+1]
   257 00000202 1C00                    	sbb 	al,0
   258 00000204 A2[5502]                	mov 	[ZPos+1],al
   259 00000207 C3                      	ret
   260                                  .key_4:
   261 00000208 8A26[5902]              	mov		ah,[ZInc]
   262 0000020C A0[5702]                	mov 	al,[ZPos+3]
   263 0000020F 00E0                    	add 	al,ah
   264 00000211 A2[5702]                	mov 	[ZPos+3],al
   265 00000214 A0[5602]                	mov 	al,[ZPos+2]
   266 00000217 1400                    	adc 	al,0
   267 00000219 A2[5602]                	mov 	[ZPos+2],al
   268 0000021C A0[5502]                	mov 	al,[ZPos+1]
   269 0000021F 1400                    	adc 	al,0
   270 00000221 A2[5502]                	mov 	[ZPos+1],al
   271 00000224 C3                      	ret
   272                                  .key_5:
   273 00000225 A0[5802]                	mov		al,[XInc]
   274 00000228 FEC8                    	dec		al
   275 0000022A A2[5802]                	mov 	[XInc],al
   276 0000022D C3                      	ret
   277                                  .key_6:
   278 0000022E A0[5802]                	mov 	al,[XInc]
   279 00000231 FEC0                    	inc		al
   280 00000233 A2[5802]                	mov 	[XInc],al
   281 00000236 C3                      	ret
   282                                  .key_7:
   283 00000237 A0[5902]                	mov 	al,[ZInc]
   284 0000023A FEC8                    	dec		al
   285 0000023C A2[5902]                	mov 	[ZInc],al
   286 0000023F C3                      	ret
   287                                  .key_8:
   288 00000240 A0[5902]                	mov 	al,[ZInc]
   289 00000243 FEC0                    	inc		al
   290 00000245 A2[5902]                	mov 	[ZInc],al
   291 00000248 C3                      	ret
   292                                  
   293                                  BuildScreenTable:
   294 00000249 31F6                    	xor		si,si	; even lines
   295 0000024B BD0020                  	mov		bp,8192 ; odd lines
   296 0000024E 8D3E[6402]              	lea		di,[BackBufferTable]
   297 00000252 B164                    	mov		cl,100
   298                                  .loop:
   299 00000254 8935                    		mov		[di],si
   300 00000256 896D02                  		mov		[di+2],bp
   301 00000259 83C650                  		add		si,80
   302 0000025C 83C550                  		add		bp,80
   303 0000025F 83C704                  		add		di,4
   304 00000262 FEC9                    		dec		cl
   305 00000264 75EE                    		jnz		.loop
   306 00000266 C3                      	ret
   307                                  	
   308                                  CopyClearBackBuffer:
   309 00000267 FC                      	cld
   310                                  
   311 00000268 8CDD                    	mov		bp,ds			; backup ds
   312                                  
   313 0000026A 8B16[0080]              	mov		dx,[BackBufferSeg]
   314 0000026E 8EDA                    	mov		ds,dx
   315                                  
   316 00000270 B800B8                  	mov		ax,VIDEO_SEGMENT
   317 00000273 8EC0                    	mov		es,ax
   318                                  
   319 00000275 31F6                    	xor		si,si		; DS:SI points to even back buffer
   320 00000277 89F7                    	mov		di,si		; ES:DI points to CGA memory.
   321                                  
   322 00000279 B9A00F                  	mov		cx,4000
   323 0000027C F3A5                    	rep	movsw			; copy from ds:si to es:di
   324                                  
   325 0000027E BE0020                  	mov		si,8192		; DS:SI points to odd back buffer
   326 00000281 89F7                    	mov		di,si		; ES:DI points to CGA memory.
   327                                  
   328 00000283 B9A00F                  	mov		cx,4000
   329 00000286 F3A5                    	rep	movsw			; copy from ds:si to es:di
   330                                  
   331 00000288 8CD8                    	mov		ax,ds		; es points to ds
   332 0000028A 8EC0                    	mov		es,ax
   333                                  
   334 0000028C B80000                  	mov		ax,0 ; 00101101001011010b ;
   335                                  	
   336 0000028F 31FF                    	xor		di,di		; DS:SI points to even back buffer	
   337 00000291 B9A00F                  	mov		cx,4000
   338 00000294 F3AB                    	rep	stosw			; clear odd back buffer
   339                                  
   340 00000296 BF0020                  	mov		di,8192		; DS:SI points to odd back buffer	
   341 00000299 B9A00F                  	mov		cx,4000
   342 0000029C F3AB                    	rep	stosw			; clear odd back buffer
   343                                  
   344 0000029E 8EDD                    	mov		ds,bp			; restore ds
   345                                  
   346 000002A0 C3                      	ret
   347                                  	
   348 000002A1 BADA03                  WaitVSync:			mov		dx,INPUT_STATUS_1	; Wait for the leading edge of vertical sync pulse.
   349 000002A4 EC                      .WaitNotVSyncLoop:		in		al,dx
   350 000002A5 2408                    						and		al,VSYNC_MASK
   351 000002A7 75FB                    						jnz		.WaitNotVSyncLoop
   352 000002A9 EC                      .WaitVSyncLoop:			in		al,dx
   353 000002AA 2408                    						and		al,VSYNC_MASK
   354 000002AC 74FB                    						jz		.WaitVSyncLoop
   355 000002AE C3                      					ret
   356                                  
   357                                  ;The 8086 has 14 16 bits registers.
   358                                  ;AX, BX, CX, DX, SI, DI, BP, SP, CS, DS, SS, ES, IP and the flags register.
   359                                  ;The last two are only accessed indirectly.
   360                                  
   361                                  ; A = exponent = value of (first bit position set *4?) with sign in bit 0
   362                                  ; Y = mantissa = value of next 8 bits of the rest of the 8/16/24 bit number
   363                                  
   364                                  ; al = lsb
   365                                  ; ah = psb
   366                                  ; dl = msb
   367                                  
   368 000002AF 86E0                    BIT24TOFP:	xchg	ah,al
   369 000002B1 88D6                    			mov		dh,dl			; store msb
   370 000002B3 84D2                    			test	dl,dl			; test msb
   371 000002B5 7906                    			jns		.BIT24FP_POS
   372 000002B7 30D2                    				xor		dl,dl
   373 000002B9 F7D8                    				neg		ax
   374 000002BB 18F2                    				sbb		dl,dh
   375                                  				
   376 000002BD 7510                    .BIT24FP_POS:	jnz		.BIT24
   377 000002BF 84E4                    				test	ah,ah			; test psb
   378 000002C1 7523                    				jnz		.BIT16
   379                                  
   380 000002C3 84C0                    				test	al,al			; test lsb
   381 000002C5 741E                    				jz		.BIT00
   382                                  
   383 000002C7 88C4                    						mov		ah,al
   384 000002C9 30C0                    						xor		al,al
   385 000002CB B208                    						mov		dl,8
   386 000002CD EB06                    						jmp		.EXP_LOOP
   387                                  
   388 000002CF 88E0                    .BIT24:		mov		al,ah
   389 000002D1 88D4                    			mov		ah,dl
   390 000002D3 B218                    			mov		dl,24
   391                                  
   392 000002D5 FECA                    .EXP_LOOP:		dec		dl			; find exponent - start from whatever x is passed in and reduce until x a bit set found 
   393 000002D7 D1E0                    				shl		ax,1		; shift lsb up into carry
   394 000002D9 73FA                    				jnc		.EXP_LOOP	; as soon as first bit is set then exit
   395                                  
   396 000002DB D0E2                    			shl		dl,1			;	ASL 			; exponent *2
   397 000002DD D0E6                    			shl		dh,1			;	ASL 	ab06	; shift msb putting sign into carry ; carry isnt being set?
   398 000002DF D0D2                    			rcl		dl,1			;	ROL 			; rotate carry into first bit of exponent - bit 0 is sign
   399 000002E1 88E0                    			mov		al,ah
   400 000002E3 88D4                    			mov		ah,dl
   401 000002E5 C3                      .BIT00:		ret					; overflow
   402                                  
   403 000002E6 B210                    .BIT16:		mov		dl,16
   404 000002E8 EBEB                    			jmp		.EXP_LOOP
   405                                  
   406                                  
   407 000002EA 84E4                    FPTO16BIT:	test	ah,ah
   408 000002EC 7842                    			js		.negative	; if negative
   409                                  			
   410 000002EE 88E6                    			mov		dh,ah		; store in temp var for sign
   411                                  
   412 000002F0 D0EC                    			shr		ah,1
   413 000002F2 D0EC                    			shr		ah,1		; /4
   414                                  			
   415 000002F4 80FC0F                  			cmp		ah,15		; more than 16 bits
   416 000002F7 7F3F                    			jg		FP_error		; yes so error so exit with carry set
   417                                  
   418 000002F9 00E4                    			add		ah,ah
   419 000002FB 8826[0703]              			mov		[.sm_jmp+1],ah
   420                                  
   421 000002FF 88C4                    			mov		ah,al		; unsigned long rc = ( ( (number.value >>1) +128) <<8) + ((number.value &1) <<7);
   422 00000301 30C0                    			xor		al,al
   423 00000303 F9                      			stc
   424 00000304 D1D8                    			rcr		ax,1
   425                                  			
   426 00000306 7302                    .sm_jmp		jnc		.jmp
   427 00000308 D1E8                    			shr		ax,1 ;1
   428 0000030A D1E8                    .jmp		shr		ax,1 ;2
   429 0000030C D1E8                    			shr		ax,1 ;3
   430 0000030E D1E8                    			shr		ax,1 ;4
   431 00000310 D1E8                    			shr		ax,1 ;5
   432 00000312 D1E8                    			shr		ax,1 ;6
   433 00000314 D1E8                    			shr		ax,1 ;7
   434 00000316 D1E8                    			shr		ax,1 ;8
   435 00000318 D1E8                    			shr		ax,1 ;9
   436 0000031A D1E8                    			shr		ax,1 ;10
   437 0000031C D1E8                    			shr		ax,1 ;11
   438 0000031E D1E8                    			shr		ax,1 ;12
   439 00000320 D1E8                    			shr		ax,1 ;13
   440 00000322 D1E8                    			shr		ax,1 ;14
   441 00000324 D1E8                    			shr		ax,1 ;15
   442                                  
   443 00000326 D0EE                    			shr		dh,1		; move input sign into carry
   444 00000328 7305                    			jnc		.positive
   445 0000032A 34FF                    				xor		al,255
   446 0000032C 80F4FF                  				xor		ah,255
   447                                  ;				neg		ax
   448 0000032F C3                      .positive   ret
   449                                  
   450 00000330 D0EC                    .negative 	shr		ah,1		; 1st bit to carry
   451 00000332 7304                    			jnc		.pos_sign
   452 00000334 B8FFFF                  				mov		ax,0ffffh
   453 00000337 C3                      				ret
   454                                  
   455                                  .pos_sign:
   456                                  FP_error:
   457 00000338 31C0                    			xor		ax,ax
   458 0000033A C3                      			ret
   459                                  
   460 0000033B 84E4                    FPTO8BIT:	test	ah,ah		;	TYA 				; input X/Y (mantisa/exponent) -  output X=HI/Y=LO ; transfer exponent? to a
   461 0000033D 7830                    			js		.negative	; if negative			;			BMI		b849F		; if negative
   462                                  
   463 0000033F 88E2                    			mov		dl,ah		; store in temp var for sign
   464                                  
   465 00000341 D0EC                    			shr		ah,1
   466 00000343 D0EC                    			shr		ah,1		; /4
   467                                  
   468 00000345 80FC07                  			cmp		ah,7				;			CMP 	#$07		; is it greater than 7
   469 00000348 7FEE                    			jg		FP_error	;			BCS 	FP8BIT_ERR		; yes so error so exit with carry set
   470                                  
   471 0000034A 00E4                    			add		ah,ah
   472 0000034C 8826[5403]              			mov		[.sm_jmp+1],ah
   473                                  
   474 00000350 F9                      			stc
   475 00000351 D0D8                    			rcr		al,1		;		rc = (number.value >>1) +128;
   476                                  
   477 00000353 7302                    .sm_jmp		jnc		.jmp
   478 00000355 D0E8                    			shr		al,1
   479 00000357 D0E8                    .jmp		shr		al,1
   480 00000359 D0E8                    			shr		al,1
   481 0000035B D0E8                    			shr		al,1
   482 0000035D D0E8                    			shr		al,1
   483 0000035F D0E8                    			shr		al,1
   484 00000361 D0E8                    			shr		al,1
   485                                  
   486 00000363 80D400                  .cont:		adc		ah,0		;  	ADC 	#0			; add carry?
   487 00000366 78D0                    			js		FP_error	;			BMI 	b84A5		; if minus then error?
   488                                  
   489 00000368 D0EA                    			shr		dl,1		; move input sign into carry
   490 0000036A 7302                    			jnc		.positive
   491 0000036C F6D8                    				neg		al
   492 0000036E C3                      .positive	ret
   493                                  
   494 0000036F 80FCFC                  .negative:	cmp		ah,0fch		;	b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)
   495 00000372 30E4                    			xor		ah,ah		;			LDA 	#$00		; resets the output x value? 
   496 00000374 EBED                    			jmp		.cont		;			BEQ 	b848F		; jump back into code
   497                                  
   498                                  
   499 00000376 89FE                    HexChar:	mov		si,di
   500 00000378 88C3                    			mov		bl,al
   501 0000037A D0EB                    			shr		bl,1
   502 0000037C D0EB                    			shr		bl,1
   503 0000037E D0EB                    			shr		bl,1
   504 00000380 D0EB                    			shr		bl,1
   505 00000382 83E30F                  			and		bx,15
   506 00000385 8AA7[0002]              			mov		ah,[Hex0+bx]
   507 00000389 268825                  			mov		[es:di],ah
   508 0000038C 81C70020                			add		di,8192
   509 00000390 8AA7[1002]              			mov		ah,[Hex1+bx]
   510 00000394 268825                  			mov		[es:di],ah
   511 00000397 81EFB01F                			sub		di,8192-80
   512 0000039B 8AA7[2002]              			mov		ah,[Hex2+bx]
   513 0000039F 268825                  			mov		[es:di],ah
   514 000003A2 81C70020                			add		di,8192
   515 000003A6 8AA7[3002]              			mov		ah,[Hex3+bx]
   516 000003AA 268825                  			mov		[es:di],ah
   517 000003AD 81EFB01F                			sub		di,8192-80
   518 000003B1 8AA7[4002]              			mov		ah,[Hex4+bx]
   519 000003B5 268825                  			mov		[es:di],ah
   520                                  
   521 000003B8 89F7                    			mov		di,si
   522 000003BA 47                      			inc		di
   523                                  
   524 000003BB 88C3                    			mov		bl,al
   525 000003BD 80E30F                  			and		bl,15
   526 000003C0 8A87[0002]              			mov		al,[Hex0+bx]
   527 000003C4 268805                  			mov		[es:di],al
   528 000003C7 81C70020                			add		di,8192
   529 000003CB 8A87[1002]              			mov		al,[Hex1+bx]
   530 000003CF 268805                  			mov		[es:di],al
   531 000003D2 81EFB01F                			sub		di,8192-80
   532 000003D6 8A87[2002]              			mov		al,[Hex2+bx]
   533 000003DA 268805                  			mov		[es:di],al
   534 000003DD 81C70020                			add		di,8192
   535 000003E1 8A87[3002]              			mov		al,[Hex3+bx]
   536 000003E5 268805                  			mov		[es:di],al
   537 000003E8 81EFB01F                			sub		di,8192-80
   538 000003EC 8A87[4002]              			mov		al,[Hex4+bx]
   539 000003F0 268805                  			mov		[es:di],al
   540 000003F3 C3                      			ret
   541                                  
   542 000003F4 50                      Hex24:		push	ax
   543 000003F5 53                      			push	bx
   544                                  
   545 000003F6 88F8                    			mov		al,bh
   546 000003F8 E82100                  			call	Hex8
   547                                  						
   548 000003FB 5B                      			pop		bx
   549 000003FC 58                      			pop		ax
   550                                  
   551 000003FD 50                      			push	ax
   552 000003FE 53                      			push	bx
   553                                  
   554 000003FF BF0200                  			mov		di,2
   555 00000402 E81900                  			call	HexByte
   556                                  
   557 00000405 5B                      			pop		bx
   558 00000406 58                      			pop		ax
   559                                  
   560 00000407 88E0                    			mov		al,ah
   561 00000409 BF0400                  			mov		di,4
   562 0000040C EB10                    			jmp		HexByte	; does ret
   563                                  
   564 0000040E 50                      Hex16:		push	ax
   565 0000040F 53                      			push	bx
   566                                  
   567 00000410 88E0                    			mov		al,ah
   568 00000412 E80700                  			call	Hex8
   569                                  						
   570 00000415 5B                      			pop		bx
   571 00000416 58                      			pop		ax
   572                                  
   573 00000417 BF0200                  			mov		di,2
   574 0000041A EB02                    			jmp		HexByte ; does ret
   575                                  
   576 0000041C 31FF                    Hex8:		xor		di,di
   577 0000041E 30FF                    HexByte:	xor		bh,bh
   578 00000420 88DC                    			mov		ah,bl
   579 00000422 00E4                    			add		ah,ah	; *2
   580 00000424 00E3                    			add		bl,ah	; *3
   581 00000426 01DB                    			add		bx,bx	; *6
   582 00000428 01DB                    			add		bx,bx	; *12
   583 0000042A 03BF[6402]              			add		di,[BackBufferTable+bx]	; lookup start ver
   584 0000042E E845FF                  			call	HexChar
   585 00000431 C3                      			ret
   586                                  
   587 00000432 30D2                    MATH_LIMIT_EXIT:	xor		dl,dl
   588 00000434 88C6                    					mov		dh,al
   589 00000436 C3                      					ret
   590                                  
   591 00000437 88C8                    FPADD_CONT:		mov		al,cl		;	LDA		ab18	; ($838B entry point)  
   592 00000439 D0E8                    				shr		al,1		;			LSR 
   593 0000043B 721A                    				jc		FPADD_CONT2	;			BCS 	FPADD_CONT2
   594                                  
   595 0000043D 88D0                    				mov		al,dl		;        TXA 
   596 0000043F 10D8                    				adc		al,bl		;        ADC 	ab08
   597 00000441 D0D8                    				rcr		al,1		;        ROR 
   598 00000443 80C604                  				add		dh,4		;        INY 
   599                                  									;        INY 
   600                                  									;        INY 
   601                                  									;        INY 
   602 00000446 88C2                    				mov		dl,al		;        TAX 
   603                                  									;        STA 	ab08
   604                                  									;        STY 	ab09
   605                                  
   606 00000448 C606[6202]F8            	mov		[Test9], byte 0f8h
   607 0000044D C3                      				ret					;        RTS 
   608                                  
   609 0000044E 88F0                    FP_ADD_ERR		mov		al,dh			;		TYA 
   610 00000450 D0E0                    				shl		al,1			;			ASL 
   611 00000452 7E76                    				jle		FP_ADD_ERR_1ST	;			BCC 	FP_ADD_ERR_1ST
   612 00000454 E9D400                  				jmp		FP_ADD_ERR_2ND	;			JMP 	FP_ADD_ERR_2ND
   613                                  
   614 00000457 88D0                    FPADD_CONT2:	mov		al,dl			;		TXA 
   615 00000459 F5                      				cmc
   616 0000045A 18D8                    				sbb		al,bl			;      	SBC 	ab08
   617                                  
   618 0000045C 7408                    				je		FPADD_CONT3		;    	BEQ 	FPADD_CONT3
   619                                  	
   620 0000045E 7F77                    				jg		FPADD_CONT6		;		BCS 	FPADD_CONT6
   621                                  
   622 00000460 88FE                    				mov		dh,bh			;			LDY 	ab09
   623 00000462 F6D8                    				neg		al				;			EOR 	#$FF
   624                                  										;			ADC 	#$01
   625 00000464 EB71                    				jmp		FPADD_CONT6		;			JMP 	FPADD_CONT6
   626                                  
   627 00000466 88F0                    FPADD_CONT3		mov		al,dh			;		TYA 
   628                                  										;				SEC 
   629 00000468 2C24                    				sub		al,024h			;				SBC 	#$24
   630                                  ; BVS 	_MATH_LIMIT_POS
   631                                  
   632 0000046A C606[6202]F7            	mov		[Test9], byte 0f7h
   633                                  
   634 0000046F EBC1                    				jmp		MATH_LIMIT_EXIT	; jmp		MATH_LIMIT_EXIT	;					BVC 	MATH_LIMIT_EXIT
   635                                  	
   636                                  ; A = AL
   637                                  ; X = DL
   638                                  ; Y = DH
   639                                  ; 08 = BL
   640                                  ; 09 = BH
   641                                  ; ab18 = CL
   642                                  ; ab06 = CH
   643                                  	
   644 00000471 88F0                    FP_ADD:		mov		al,dh			;  	TYA			; XY + 89	; transfer num1_hi to a
   645                                  
   646 00000473 C606[6202]00            	mov		[Test9], byte 000h
   647                                  	
   648 00000478 28F8                    			sub		al,bh			;        SBC 	ab09			; sub num2_hi from a
   649                                  ; BVS 	FP_ADD_ERR		; overflow so exit
   650 0000047A F5                      			cmc
   651 0000047B 88C1                    			mov		cl,al			;        STA 	ab18			; ab18 = num1_hi - num2_hi
   652 0000047D 1401                    			adc		al,1			;        ADC 	#$01			; add 1 + carry?
   653                                  ; BVS 	FP_ADD_ERR		; overflow so exit
   654 0000047F 7878                    			js		FPADD_CONT8			;        BMI 	FPADD_CONT8			
   655                                  
   656 00000481 D0E8                    			shr		al,1			;        LSR 					; divide by 2
   657 00000483 D0E8                    			shr		al,1			;        LSR 					; divide by 2
   658 00000485 74B0                    			je		FPADD_CONT		;        BEQ 	FPADD_CONT		; if 0
   659                                  			
   660                                  			
   661 00000487 3C09                    			cmp		al,09h			;        CMP 	#$09			; gt 9
   662 00000489 7F3F                    			jg		FP_ADD_ERR_1ST	;        BCS 	FP_ADD_ERR_1ST	; yes
   663                                  
   664 0000048B 340F                    			xor		al,15			;        EOR 	#$0F			; reverse 
   665 0000048D 00C0                    			add		al,al			; *2
   666 0000048F A2[9804]                			mov		[FP_ADD_JMP1+1],al	;        STA 	FP_ADD_JMP1 +1		; jump forward that amount
   667                                  
   668 00000492 88D8                    			mov		al,bl			;        LDA		ab08			; get num_hi
   669 00000494 F9                      			stc						;        SEC ;        SEC						; set carry 
   670 00000495 D0D8                    			rcr		al,1			;		rc = (number.value >>1) +128;	;        ROR;        ROR 					; /2 and move carry into first bit
   671                                  
   672                                  FP_ADD_JMP1: 	
   673 00000497 730E                    			jnc		b83B3 	; self modifiction code shift
   674 00000499 90                      			nop					;        NOP 					; NA
   675 0000049A 90                      			nop					;        NOP 					; NA
   676                                  
   677 0000049B 90                      			nop					;        NOP 					; NA
   678 0000049C 90                      			nop					;        NOP 					; NA
   679                                  
   680 0000049D 90                      			nop					;        NOP 					; NA
   681 0000049E 90                      			nop					;        NOP 					; NA
   682                                  
   683 0000049F 90                      			nop					;        NOP 					; NA
   684 000004A0 90                      			nop					;        NOP 					; NA
   685                                  
   686 000004A1 90                      			nop					;        NOP 					; NA
   687 000004A2 90                      			nop					;        NOP 					; NA
   688                                  
   689 000004A3 90                      			nop					;        NOP 					; NA
   690 000004A4 90                      			nop					;        NOP 					; NA
   691                                  
   692 000004A5 90                      			nop					;        NOP 					; NA
   693 000004A6 90                      			nop					;        NOP 					; NA
   694                                  
   695 000004A7 D0E8                    b83B3   	shr		al,1		;		LSR 					; divide by 2
   696 000004A9 D0E8                    			shr		al,1		;        LSR  					; divide by 2
   697 000004AB D0E8                    			shr		al,1		;        LSR  					; divide by 2
   698 000004AD D0E8                    			shr		al,1		;        LSR  					; divide by 2
   699 000004AF D0E8                    			shr		al,1		;        LSR  					; divide by 2
   700 000004B1 D0E8                    			shr		al,1		;        LSR  					; divide by 2
   701 000004B3 D0E8                    			shr		al,1		;        LSR  					; divide by 2
   702                                  
   703 000004B5 88C5                    			mov		ch,al		;        STA 	ab06			; 
   704 000004B7 88C8                    			mov		al,cl		;        LDA 	ab18
   705                                  
   706 000004B9 D0E8                    			shr		al,1		;        LSR 					; divide by 2 - setting carry?
   707 000004BB 88D0                    			mov		al,dl		;        TXA 					; transfer num1_lo to a
   708                                  
   709 000004BD 7213                    			jc		FPADD_CONT5	;        BCS 	FPADD_CONT5			; carry set
   710                                  	
   711 000004BF 10E8                    FPADD_CONT4	adc		al,ch		;		ADC 	ab06
   712 000004C1 7305                    			jnc		FPADD_CONT7	;			BCC 	FPADD_CONT7
   713                                  			
   714 000004C3 D0E8                    			shr		al,1		;				LSR 				; divide by 2
   715 000004C5 80C604                  			add		dh,4		;				INY 				; y++
   716                                  								;				INY 				; y++
   717                                  								;				INY 				; y++
   718                                  								;				INY 				; y++
   719 000004C8 88C2                    FPADD_CONT7	mov		dl,al		;   	TAX
   720                                  FP_ADD_ERR_1ST: 
   721                                  								;			STX 	ab08
   722                                  								;			STY 	ab09
   723 000004CA C606[6202]F5            	mov		[Test9], byte 0f5h
   724 000004CF 89D0                    	mov		ax,dx				; working
   725 000004D1 C3                      			ret					;			RTS 
   726                                  
   727 000004D2 28E8                    FPADD_CONT5	sub		al,	ch	; sbb		al,	ch			;			SBC ab06
   728 000004D4 F5                      			cmc
   729 000004D5 72F1                    			jc		FPADD_CONT7		;			BCS FPADD_CONT7
   730                                  
   731 000004D7 88F5                    FPADD_CONT6	mov		ch,dh ; al			;			STY ab06
   732 000004D9 30F6                    			xor		dh,dh			;        LDY #$00
   733                                  
   734 000004DB FECE                    FPADD_LOOP1		dec		dh			;				DEY 
   735 000004DD D0E0                    				shl		al,1		;				ASL
   736 000004DF 73FA                    				jnc		FPADD_LOOP1	;				BCC		FPADD_LOOP1
   737                                  
   738 000004E1 88C2                    				mov		dl,al			;        TAX 
   739 000004E3 88F0                    				mov		al,dh			;        TYA 
   740 000004E5 D0E0                    				shl		al,1		;        ASL 
   741 000004E7 D0E0                    				shl		al,1		;        ASL 
   742                                  									;        CLC 				
   743 000004E9 00E8                    				add		al,ch		;        ADC 	ab06
   744                                  ; BVS 	FPADD_ERR3
   745 000004EB 88C6                    				mov		dh,al		;			TAY 
   746                                  									;			STX 	ab08
   747                                  									;			STY 	ab09
   748 000004ED C606[6202]F3            	mov		[Test9], byte 0f3h
   749 000004F2 C3                      				ret					;			RTS 	; working
   750                                  
   751                                  FPADD_ERR3:							;	LDX 	#<8400
   752                                  									;			LDY 	#>8400
   753                                  									;			STX 	ab08
   754                                  									;			STY		ab09
   755 000004F3 C606[6202]02            	mov		[Test9], byte 002h
   756 000004F8 C3                      				ret					;			RTS 
   757                                  
   758 000004F9 3CE0                    FPADD_CONT8:	cmp		al,0e0h				;		CMP 	#$E0
   759 000004FB 7E2E                    				jle		FP_ADD_ERR_2ND		;			BCC 	FP_ADD_ERR_2ND
   760                                  
   761 000004FD D0E8                    				shr		al,1				;        LSR 
   762 000004FF D0E8                    				shr		al,1				;        LSR 
   763 00000501 2407                    				and		al,07				;        AND #$07
   764                                  		
   765 00000503 00C0                    				add		al,al				; *2
   766 00000505 A2[0E05]                				mov		[FP_ADD_JMP2 +1],al	;        STA FP_ADD_JMP2 +1
   767 00000508 88D0                    				mov		al,dl				;		TXA 
   768                                  
   769 0000050A F9                      				stc						;        SEC 
   770 0000050B D0D8                    				rcr		al,1			;		rc = (number.value >>1) +128;	;        ROR
   771                                  			
   772 0000050D 7506                    FP_ADD_JMP2		jnz		b8408			;	BNE b8408
   773 0000050F D0E8                    				shr		al,1			;        LSR 
   774 00000511 D0E8                    				shr		al,1			;        LSR 
   775 00000513 D0E8                    				shr		al,1			;        LSR 
   776 00000515 D0E8                    b8408			shr		al,1			;        LSR 
   777 00000517 D0E8                    				shr		al,1			;        LSR 
   778 00000519 D0E8                    				shr		al,1			;        LSR 
   779 0000051B D0E8                    				shr		al,1			;        LSR 
   780                                  	
   781 0000051D 88C5                    				mov		ch,al			;        STA ab06
   782 0000051F 88FE                    				mov		dh,bh			;        LDY ab09
   783 00000521 88C8                    				mov		al,cl			;        LDA ab18
   784 00000523 D0E8                    				shr		al,1			;        LSR 
   785 00000525 88D8                    				mov		al,	bl			;        LDA ab08
   786                                  				
   787 00000527 7396                    				jnc		FPADD_CONT4		;        BCC FPADD_CONT4
   788 00000529 EBA7                    				jmp		FPADD_CONT5		;        BCS FPADD_CONT5	; jmp
   789                                  		
   790                                  FP_ADD_ERR_2ND:					;				LDX		ab08
   791                                  								;				LDY 	ab09
   792 0000052B C606[6202]01            	mov		[Test9], byte 001h
   793 00000530 C3                      				ret				;				RTS 
   794                                  
   795                                  ; bx fp1
   796                                  ; dx fp2
   797                                  ; ax result
   798                                  
   799 00000531 88D8                    FP_DIV:		mov		al,bl
   800 00000533 0C02                    			or		al,2
   801 00000535 88FB                    			mov		bl,bh
   802 00000537 30FF                    			xor		bh,bh					; STA		FP_MULTIPLY_VALUE 		; store first value
   803 00000539 8AA7[0000]              			mov		ah,[LOG_TAB+bx]			;			LDA 	LOG_TABLE,X				; get second value - lookup bh
   804 0000053D 88F3                    			mov		bl,dh					;			LDX 	FP_MULTIPLY_POWER_SIGN	; get first power sign
   805 0000053F 2AA7[0000]              			sub		ah,[LOG_TAB+bx]			;			ADC 	LOG_TABLE,X				; second value + first power sign ? - subtract dh
   806 00000543 88E3                    			mov		bl,ah					;			TAX 							; store in x
   807 00000545 8AA7[0001]              			mov		ah,[EXP_TAB+bx]			;			LDY 	EXP_TABLE,X				; get ouput power sign
   808 00000549 7302                    			jnc		.cont					;			BCC 	_FP_MUL_CNT
   809 0000054B 2C04                    					sub		al,4			;					ADC 	#$03			; add 4 (00000011)
   810 0000054D 28D0                    .cont		sub		al,dl					;_FP_MUL_CNT	ADC 	FP_MULTIPLY_VALUE		; add first value
   811 0000054F 24FD                    			and		al,0fdh					;			AND 	#$FD					; get output value
   812 00000551 C3                      			ret								;			RTS 
   813                                  
   814                                  ; bx fp1
   815                                  ; dx fp2
   816                                  ; ax result
   817                                  
   818 00000552 88F8                    FP_MUL:		mov		al,bh
   819 00000554 30FF                    			xor		bh,bh					; STA		FP_MULTIPLY_VALUE 		; store first value
   820 00000556 8AA7[0000]              			mov		ah,[LOG_TAB+bx]			;			LDA 	LOG_TABLE,X				; get second value
   821 0000055A 88F3                    			mov		bl,dh					;			LDX 	FP_MULTIPLY_POWER_SIGN	; get first power sign
   822 0000055C 02A7[0000]              			add		ah,[LOG_TAB+bx]			;			ADC 	LOG_TABLE,X				; second value + first power sign ?
   823 00000560 88E3                    			mov		bl,ah					;			TAX 							; store in x
   824 00000562 8AA7[0001]              			mov		ah,[EXP_TAB+bx]			;			LDY 	EXP_TABLE,X				; get ouput power sign
   825 00000566 7303                    			jnc		.cont					;			BCC 	_FP_MUL_CNT
   826 00000568 80C204                  					add		dl,4			;					ADC 	#$03			; add 4 (00000011)
   827 0000056B 00D0                    .cont		add		al,dl					;_FP_MUL_CNT	ADC 	FP_MULTIPLY_VALUE		; add first value
   828 0000056D 24FD                    			and		al,0fdh					;			AND 	#$FD					; get output value
   829 0000056F C3                      			ret								;			RTS 
   830                                  	
   831                                  section .data align=2 ; 16 ; 8 ; 16
   832                                  
   833 00000000 000103040607090A        LOG_TAB db 000h,001h,003h,004h,006h,007h,009h,00Ah
   834 00000008 0B0D0E1011121415        		db 00Bh,00Dh,00Eh,010h,011h,012h,014h,015h
   835 00000010 1618191A1C1D1E20                db 016h,018h,019h,01Ah,01Ch,01Dh,01Eh,020h
   836 00000018 212224252628292A        		db 021h,022h,024h,025h,026h,028h,029h,02Ah
   837 00000020 2C2D2E2F31323334        		db 02Ch,02Dh,02Eh,02Fh,031h,032h,033h,034h
   838 00000028 363738393B3C3D3E                db 036h,037h,038h,039h,03Bh,03Ch,03Dh,03Eh
   839 00000030 3F41424344454748        		db 03Fh,041h,042h,043h,044h,045h,047h,048h
   840 00000038 494A4B4D4E4F5051        		db 049h,04Ah,04Bh,04Dh,04Eh,04Fh,050h,051h
   841 00000040 525455565758595A        		db 052h,054h,055h,056h,057h,058h,059h,05Ah
   842 00000048 5C5D5E5F60616263        		db 05Ch,05Dh,05Eh,05Fh,060h,061h,062h,063h
   843 00000050 64666768696A6B6C        		db 064h,066h,067h,068h,069h,06Ah,06Bh,06Ch
   844 00000058 6D6E6F7071727475        		db 06Dh,06Eh,06Fh,070h,071h,072h,074h,075h
   845 00000060 767778797A7B7C7D        		db 076h,077h,078h,079h,07Ah,07Bh,07Ch,07Dh
   846 00000068 7E7F808182838485        		db 07Eh,07Fh,080h,081h,082h,083h,084h,085h
   847 00000070 868788898A8B8C8D        		db 086h,087h,088h,089h,08Ah,08Bh,08Ch,08Dh
   848 00000078 8E8F909192939495        		db 08Eh,08Fh,090h,091h,092h,093h,094h,095h
   849 00000080 969798999A9B9B9C        		db 096h,097h,098h,099h,09Ah,09Bh,09Bh,09Ch
   850 00000088 9D9E9FA0A1A2A3A4        		db 09Dh,09Eh,09Fh,0A0h,0A1h,0A2h,0A3h,0A4h
   851 00000090 A5A6A7A8A9A9AAAB        		db 0A5h,0A6h,0A7h,0A8h,0A9h,0A9h,0AAh,0ABh
   852 00000098 ACADAEAFB0B1B2B2        		db 0ACh,0ADh,0AEh,0AFh,0B0h,0B1h,0B2h,0B2h
   853 000000A0 B3B4B5B6B7B8B9B9        		db 0B3h,0B4h,0B5h,0B6h,0B7h,0B8h,0B9h,0B9h
   854 000000A8 BABBBCBDBEBFC0C0        		db 0BAh,0BBh,0BCh,0BDh,0BEh,0BFh,0C0h,0C0h	
   855 000000B0 C1C2C3C4C5C6C6C7        		db 0C1h,0C2h,0C3h,0C4h,0C5h,0C6h,0C6h,0C7h
   856 000000B8 C8C9CACBCBCCCDCE        		db 0C8h,0C9h,0CAh,0CBh,0CBh,0CCh,0CDh,0CEh
   857 000000C0 CFD0D0D1D2D3D4D4        		db 0CFh,0D0h,0D0h,0D1h,0D2h,0D3h,0D4h,0D4h
   858 000000C8 D5D6D7D8D8D9DADB        		db 0D5h,0D6h,0D7h,0D8h,0D8h,0D9h,0DAh,0DBh
   859 000000D0 DCDCDDDEDFE0E0E1        		db 0DCh,0DCh,0DDh,0DEh,0DFh,0E0h,0E0h,0E1h
   860 000000D8 E2E3E4E4E5E6E7E7        		db 0E2h,0E3h,0E4h,0E4h,0E5h,0E6h,0E7h,0E7h
   861 000000E0 E8E9EAEAEBECEDEE        		db 0E8h,0E9h,0EAh,0EAh,0EBh,0ECh,0EDh,0EEh
   862 000000E8 EEEFF0F1F1F2F3F4        		db 0EEh,0EFh,0F0h,0F1h,0F1h,0F2h,0F3h,0F4h
   863 000000F0 F4F5F6F7F7F8F9F9        		db 0F4h,0F5h,0F6h,0F7h,0F7h,0F8h,0F9h,0F9h
   864 000000F8 FAFBFCFCFDFEFFFF        		db 0FAh,0FBh,0FCh,0FCh,0FDh,0FEh,0FFh,0FFh
   865                                  
   866 00000100 0001010203030405        EXP_TAB db 000h,001h,001h,002h,003h,003h,004h,005h
   867 00000108 0606070808090A0B        		db 006h,006h,007h,008h,008h,009h,00Ah,00Bh
   868 00000110 0B0C0D0E0E0F1010        		db 00Bh,00Ch,00Dh,00Eh,00Eh,00Fh,010h,010h
   869 00000118 1112131314151616        		db 011h,012h,013h,013h,014h,015h,016h,016h
   870 00000120 171819191A1B1C1D        		db 017h,018h,019h,019h,01Ah,01Bh,01Ch,01Dh
   871 00000128 1D1E1F2020212223        		db 01Dh,01Eh,01Fh,020h,020h,021h,022h,023h
   872 00000130 2424252627282829        		db 024h,024h,025h,026h,027h,028h,028h,029h
   873 00000138 2A2B2C2C2D2E2F30        		db 02Ah,02Bh,02Ch,02Ch,02Dh,02Eh,02Fh,030h
   874 00000140 3031323334353536        		db 030h,031h,032h,033h,034h,035h,035h,036h
   875 00000148 3738393A3A3B3C3D        		db 037h,038h,039h,03Ah,03Ah,03Bh,03Ch,03Dh
   876 00000150 3E3F404141424344        		db 03Eh,03Fh,040h,041h,041h,042h,043h,044h
   877 00000158 4546474848494A4B        		db 045h,046h,047h,048h,048h,049h,04Ah,04Bh
   878 00000160 4C4D4E4F50515152        		db 04Ch,04Dh,04Eh,04Fh,050h,051h,051h,052h
   879 00000168 535455565758595A        		db 053h,054h,055h,056h,057h,058h,059h,05Ah
   880 00000170 5B5C5D5E5E5F6061        		db 05Bh,05Ch,05Dh,05Eh,05Eh,05Fh,060h,061h
   881 00000178 6263646566676869        		db 062h,063h,064h,065h,066h,067h,068h,069h
   882 00000180 6A6B6C6D6E6F7071        		db 06Ah,06Bh,06Ch,06Dh,06Eh,06Fh,070h,071h
   883 00000188 7273747576777879        		db 072h,073h,074h,075h,076h,077h,078h,079h
   884 00000190 7A7B7C7D7E7F8081        		db 07Ah,07Bh,07Ch,07Dh,07Eh,07Fh,080h,081h
   885 00000198 828384858788898A        		db 082h,083h,084h,085h,087h,088h,089h,08Ah
   886 000001A0 8B8C8D8E8F909192        		db 08Bh,08Ch,08Dh,08Eh,08Fh,090h,091h,092h
   887 000001A8 9395969798999A9B        		db 093h,095h,096h,097h,098h,099h,09Ah,09Bh
   888 000001B0 9C9D9FA0A1A2A3A4        		db 09Ch,09Dh,09Fh,0A0h,0A1h,0A2h,0A3h,0A4h
   889 000001B8 A5A6A8A9AAABACAD        		db 0A5h,0A6h,0A8h,0A9h,0AAh,0ABh,0ACh,0ADh
   890 000001C0 AFB0B1B2B3B4B6B7        		db 0AFh,0B0h,0B1h,0B2h,0B3h,0B4h,0B6h,0B7h
   891 000001C8 B8B9BABCBDBEBFC0        		db 0B8h,0B9h,0BAh,0BCh,0BDh,0BEh,0BFh,0C0h
   892 000001D0 C2C3C4C5C6C8C9CA        		db 0C2h,0C3h,0C4h,0C5h,0C6h,0C8h,0C9h,0CAh
   893 000001D8 CBCDCECFD0D2D3D4        		db 0CBh,0CDh,0CEh,0CFh,0D0h,0D2h,0D3h,0D4h
   894 000001E0 D6D7D8D9DBDCDDDE        		db 0D6h,0D7h,0D8h,0D9h,0DBh,0DCh,0DDh,0DEh
   895 000001E8 E0E1E2E4E5E6E8E9        		db 0E0h,0E1h,0E2h,0E4h,0E5h,0E6h,0E8h,0E9h
   896 000001F0 EAECEDEEF0F1F2F4        		db 0EAh,0ECh,0EDh,0EEh,0F0h,0F1h,0F2h,0F4h	
   897 000001F8 F5F6F8F9FAFCFDFF        		db 0F5h,0F6h,0F8h,0F9h,0FAh,0FCh,0FDh,0FFh
   898                                  
   899 00000200 FC30FCFCCCFCFCFCFC-     Hex0	db 11111100b,00110000b,11111100b,11111100b,11001100b,11111100b,11111100b,11111100b,11111100b,11111100b,11111100b,11111100b,11111100b,11110000b,11111100b,11111100b
   899 00000209 FCFCFCFCF0FCFC     
   900 00000210 CCF00C0CCCC0C00CCC-     Hex1	db 11001100b,11110000b,00001100b,00001100b,11001100b,11000000b,11000000b,00001100b,11001100b,11001100b,11001100b,11001100b,11000000b,11001100b,11000000b,11000000b
   900 00000219 CCCCCCC0CCC0C0     
   901 00000220 CC30FCFCFCFCFC0CFC-     Hex2	db 11001100b,00110000b,11111100b,11111100b,11111100b,11111100b,11111100b,00001100b,11111100b,11111100b,11111100b,11110000b,11000000b,11001100b,11111100b,11111100b
   901 00000229 FCFCF0C0CCFCFC     
   902 00000230 CC30C00C0C0CCC0CCC-     Hex3	db 11001100b,00110000b,11000000b,00001100b,00001100b,00001100b,11001100b,00001100b,11001100b,00001100b,11001100b,11001100b,11000000b,11001100b,11000000b,11000000b
   902 00000239 0CCCCCC0CCC0C0     
   903 00000240 FCFCFCFC0CFCFC0CFC-     Hex4	db 11111100b,11111100b,11111100b,11111100b,00001100b,11111100b,11111100b,00001100b,11111100b,11111100b,11001100b,11111100b,11111100b,11110000b,11111100b,11000000b
   903 00000249 FCCCFCFCF0FCC0     
   904                                  
   905 00000250 00FFDD1C                XPos	db	0h,0ffh,0ddh,01ch ; 0feh,082h,078h ; 031h,0c8h ; 0f2h,07h ; 0f8h,0b6h ; 0f2h,07h; 08eh,06bh ; 0ffh,0eeh,0ddh,0cch
   906 00000254 00FFD6EC                ZPos	db	0h,0ffh,0d6h,0ech ;01h,07dh,044h ; 0eh,0b4h ; 0ffh,0f2h,096h ; 00h,0eh,0b4h
   907 00000258 00                      XInc	db	0
   908 00000259 00                      ZInc	db	0
   909 0000025A 11                      Test1	db	11h
   910 0000025B 22                      Test2	db	22h
   911 0000025C 33                      Test3	db	33h
   912 0000025D 44                      Test4	db	44h
   913 0000025E 55                      Test5	db	55h
   914 0000025F 66                      Test6	db	66h
   915 00000260 77                      Test7	db	77h
   916 00000261 88                      Test8	db	88h
   917 00000262 00                      Test9	db	0
   918 00000263 00                      Exit	db	0
   919                                  
   920                                  align 2
   921                                  
   922 00000264 00005020A000F02040-     BackBufferTable		dw	SE+(SW*000),SO+(SW*001),SE+(SW*002),SO+(SW*003),SE+(SW*004),SO+(SW*005),SE+(SW*006),SO+(SW*007),SE+(SW*008),SO+(SW*009)
   922 0000026D 019021E00130228002-
   922 00000276 D022               
   923 00000278 20037023C003102460-     					dw	SE+(SW*010),SO+(SW*011),SE+(SW*012),SO+(SW*013),SE+(SW*014),SO+(SW*015),SE+(SW*016),SO+(SW*017),SE+(SW*018),SO+(SW*019)
   923 00000281 04B02400055025A005-
   923 0000028A F025               
   924 0000028C 40069026E006302780-     					dw	SE+(SW*020),SO+(SW*021),SE+(SW*022),SO+(SW*023),SE+(SW*024),SO+(SW*025),SE+(SW*026),SO+(SW*027),SE+(SW*028),SO+(SW*029)
   924 00000295 07D02720087028C008-
   924 0000029E 1029               
   925 000002A0 6009B029000A502AA0-     					dw	SE+(SW*030),SO+(SW*031),SE+(SW*032),SO+(SW*033),SE+(SW*034),SO+(SW*035),SE+(SW*036),SO+(SW*037),SE+(SW*038),SO+(SW*039)
   925 000002A9 0AF02A400B902BE00B-
   925 000002B2 302C               
   926 000002B4 800CD02C200D702DC0-     					dw	SE+(SW*040),SO+(SW*041),SE+(SW*042),SO+(SW*043),SE+(SW*044),SO+(SW*045),SE+(SW*046),SO+(SW*047),SE+(SW*048),SO+(SW*049)
   926 000002BD 0D102E600EB02E000F-
   926 000002C6 502F               
   927 000002C8 A00FF02F40109030E0-     					dw	SE+(SW*050),SO+(SW*051),SE+(SW*052),SO+(SW*053),SE+(SW*054),SO+(SW*055),SE+(SW*056),SO+(SW*057),SE+(SW*058),SO+(SW*059)
   927 000002D1 1030318011D0312012-
   927 000002DA 7032               
   928 000002DC C01210336013B03300-     					dw	SE+(SW*060),SO+(SW*061),SE+(SW*062),SO+(SW*063),SE+(SW*064),SO+(SW*065),SE+(SW*066),SO+(SW*067),SE+(SW*068),SO+(SW*069)
   928 000002E5 145034A014F0344015-
   928 000002EE 9035               
   929 000002F0 E01530368016D03620-     					dw	SE+(SW*070),SO+(SW*071),SE+(SW*072),SO+(SW*073),SE+(SW*074),SO+(SW*075),SE+(SW*076),SO+(SW*077),SE+(SW*078),SO+(SW*079)
   929 000002F9 177037C01710386018-
   929 00000302 B038               
   930 00000304 00195039A019F03940-     					dw	SE+(SW*080),SO+(SW*081),SE+(SW*082),SO+(SW*083),SE+(SW*084),SO+(SW*085),SE+(SW*086),SO+(SW*087),SE+(SW*088),SO+(SW*089)
   930 0000030D 1A903AE01A303B801B-
   930 00000316 D03B               
   931 00000318 201C703CC01C103D60-     					dw	SE+(SW*090),SO+(SW*091),SE+(SW*092),SO+(SW*093),SE+(SW*094),SO+(SW*095),SE+(SW*096),SO+(SW*097),SE+(SW*098),SO+(SW*099)
   931 00000321 1DB03D001E503EA01E-
   931 0000032A F03E               
   932 0000032C 401F903FE01F304080-                    		dw	SE+(SW*100),SO+(SW*101),SE+(SW*102),SO+(SW*103),SE+(SW*104),SO+(SW*105),SE+(SW*106),SO+(SW*107),SE+(SW*108),SO+(SW*109)
   932 00000335 20D04020217041C021-
   932 0000033E 1042               
   933 00000340 6022B04200235043A0-     					dw	SE+(SW*110),SO+(SW*111),SE+(SW*112),SO+(SW*113),SE+(SW*114),SO+(SW*115),SE+(SW*116),SO+(SW*117),SE+(SW*118),SO+(SW*119)
   933 00000349 23F04340249044E024-
   933 00000352 3045               
   934 00000354 8025D04520267046C0-     					dw	SE+(SW*120),SO+(SW*121),SE+(SW*122),SO+(SW*123),SE+(SW*124),SO+(SW*125),SE+(SW*126),SO+(SW*127),SE+(SW*128),SO+(SW*129)
   934 0000035D 2610476027B0470028-
   934 00000366 5048               
   935 00000368 A028F04840299049E0-     					dw	SE+(SW*130),SO+(SW*131),SE+(SW*132),SO+(SW*133),SE+(SW*134),SO+(SW*135),SE+(SW*136),SO+(SW*137),SE+(SW*138),SO+(SW*139)
   935 00000371 29304A802AD04A202B-
   935 0000037A 704B               
   936 0000037C C02B104C602CB04C00-     					dw	SE+(SW*140),SO+(SW*141),SE+(SW*142),SO+(SW*143),SE+(SW*144),SO+(SW*145),SE+(SW*146),SO+(SW*147),SE+(SW*148),SO+(SW*149)
   936 00000385 2D504DA02DF04D402E-
   936 0000038E 904E               
   937 00000390 E02E304F802FD04F20-     					dw	SE+(SW*150),SO+(SW*151),SE+(SW*152),SO+(SW*153),SE+(SW*154),SO+(SW*155),SE+(SW*156),SO+(SW*157),SE+(SW*158),SO+(SW*159)
   937 00000399 307050C03010516031-
   937 000003A2 B051               
   938 000003A4 00325052A032F05240-     					dw	SE+(SW*160),SO+(SW*161),SE+(SW*162),SO+(SW*163),SE+(SW*164),SO+(SW*165),SE+(SW*166),SO+(SW*167),SE+(SW*168),SO+(SW*169)
   938 000003AD 339053E03330548034-
   938 000003B6 D054               
   939 000003B8 20357055C035105660-     					dw	SE+(SW*170),SO+(SW*171),SE+(SW*172),SO+(SW*173),SE+(SW*174),SO+(SW*175),SE+(SW*176),SO+(SW*177),SE+(SW*178),SO+(SW*179)
   939 000003C1 36B05600375057A037-
   939 000003CA F057               
   940 000003CC 40389058E038305980-     					dw	SE+(SW*180),SO+(SW*181),SE+(SW*182),SO+(SW*183),SE+(SW*184),SO+(SW*185),SE+(SW*186),SO+(SW*187),SE+(SW*188),SO+(SW*189)
   940 000003D5 39D059203A705AC03A-
   940 000003DE 105B               
   941 000003E0 603BB05B003C505CA0-     					dw	SE+(SW*190),SO+(SW*191),SE+(SW*192),SO+(SW*193),SE+(SW*194),SO+(SW*195),SE+(SW*196),SO+(SW*197),SE+(SW*198),SO+(SW*199)
   941 000003E9 3CF05C403D905DE03D-
   941 000003F2 305E               
   942                                  
   943                                  section .bss 	; put uninitialized data here
   944                                  
   945 00000000 <res 8000h>             BackBuffer 	resw 16384	; 2 screen buffers
   946 00008000 ????                    BackBufferSeg	resw	1	; pointer to the segment containing the back buffer
   947                                  
   948 00008002 ????                    tst		resw	1
   949 00008004 ????                    XFP		resw	1
   950 00008006 ????                    ZFP		resw	1
   951                                  
